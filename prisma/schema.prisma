// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  TO_RECOGNIZE
  TO_EXTRACT
  TO_VERIFY
  TO_GENERATE
  PROCESSED
}


model User {
  id String @id @default(uuid())
  email String @unique
  username String @unique
  password String
  extractions Extraction[]
  Receipt Receipt[]
  Invoice Invoice[]
  CardStatement CardStatement[]
  preferences Preferences?
}


model Extraction {
  id String @id @default(uuid())
  filename String
  objectPath String
  text String?
  category String?
  json Json?
  receipt Receipt?
  invoice Invoice?
  cardStatement CardStatement?
  userId String
  status Status @default(TO_RECOGNIZE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)


}

model Receipt{
  id String @id @default(uuid())
  objectPath String
  number String?
  category String
  date DateTime
  time String?
  from String
  subtotal Float?
  tax Float?
  tip Float?
  total Float
  items ReceiptItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String 
  extractionId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  extraction Extraction @relation(fields: [extractionId], references: [id], onDelete: Cascade)


}


model ReceiptItem {
  id String @id @default(uuid())
  description String
  quanity Float
  amount Float
  receiptId String
  Receipt Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
}


model Invoice{
  id String @id @default(uuid())
  objectPath String
  invoiceNumber String?
  category String
  date DateTime
  fromName String?
  fromAddress String?
  toName String?
  toAddress String?
  items InvoiceItem[]
  currency String?
  totalAmountDue Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  extractionId String @unique
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  extraction Extraction @relation(fields: [extractionId],references: [id],onDelete: Cascade)
}

model InvoiceItem {
  id String @id @default(uuid())
  description String?
  amount Float?
  invoiceId String
  Invoice Invoice @relation(fields: [invoiceId],references: [id],onDelete: Cascade)
}

model CardStatement {
  id String @id @default(uuid())
  objectPath String 
  issuerName String
  issuerAddress String?
  recipientName String?
  recipientAddress String?
  creditCardName String?
  creditCardHolder String?
  creditCardNumber String?
  date DateTime
  transactions CardTransaction[]
  currency String?
  totalAmountDue Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  extractionId String @unique
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  extraction Extraction @relation(fields: [extractionId],references: [id],onDelete: Cascade)
}

model CardTransaction {
  id String @id @default(uuid())
  description String?
  category String
  amount Float?
  cardStatementId String
  CardStatement CardStatement @relation(fields: [cardStatementId],references: [id],onDelete: Cascade)
}

model Preferences{
  id String @id @default(uuid())
  classificationModel String
  extractionModel String
  analysisModel String
  userId String @unique 
  receiptExampleExtractionId String?
  invoiceExampleExtractionId String?
  cardStatementExampleExtractionId String?


  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
}

